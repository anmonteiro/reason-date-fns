// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE

import * as Parse from "date-fns/fp/parse";
import * as Format from "date-fns/fp/format";
import * as SetDay from "date-fns/fp/setDay";
import * as AddDays from "date-fns/fp/addDays";
import * as IsAfter from "date-fns/fp/isAfter";
import * as IsEqual from "date-fns/fp/isEqual";
import * as SubDays from "date-fns/fp/subDays";
import * as IsBefore from "date-fns/fp/isBefore";
import * as ClosestTo from "date-fns/fp/closestTo";
import * as IsSameDay from "date-fns/fp/isSameDay";
import * as CompareAsc from "date-fns/fp/compareAsc";
import * as CompareDesc from "date-fns/fp/compareDesc";
import * as LightFormat from "date-fns/fp/lightFormat";
import * as SetDayOfYear from "date-fns/fp/setDayOfYear";
import * as ClosestIndexTo from "date-fns/fp/closestIndexTo";
import * as FormatDistance from "date-fns/fp/formatDistance";
import * as FormatRelative from "date-fns/fp/formatRelative";
import * as AddBusinessDays from "date-fns/fp/addBusinessDays";
import * as DifferenceInDays from "date-fns/fp/differenceInDays";
import * as FormatWithOptions from "date-fns/fp/formatWithOptions";
import * as DifferenceInBusinessDays from "date-fns/fp/differenceInBusinessDays";
import * as DifferenceInCalendarDays from "date-fns/fp/differenceInCalendarDays";
import * as ReasonDateFnsCurryHelpers$ReasonDateFns from "./ReasonDateFnsCurryHelpers.bs.js";

var partial_arg = ClosestIndexTo.default;

function closestIndexTo(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg, param, param$1);
}

var partial_arg$1 = FormatWithOptions.default;

function formatWithOptions(param, param$1, param$2) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry3(partial_arg$1, param, param$1, param$2);
}

var partial_arg$2 = Format.default;

function format(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$2, param, param$1);
}

var partial_arg$3 = ClosestTo.default;

function closestTo(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$3, param, param$1);
}

var partial_arg$4 = CompareAsc.default;

function compareAsc(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$4, param, param$1);
}

var partial_arg$5 = CompareDesc.default;

function compareDesc(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$5, param, param$1);
}

var partial_arg$6 = FormatDistance.default;

function formatDistance(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$6, param, param$1);
}

var partial_arg$7 = FormatRelative.default;

function formatRelative(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$7, param, param$1);
}

var partial_arg$8 = IsAfter.default;

function isAfter(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$8, param, param$1);
}

var partial_arg$9 = IsBefore.default;

function isBefore(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$9, param, param$1);
}

var partial_arg$10 = IsEqual.default;

function isEqual(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$10, param, param$1);
}

var partial_arg$11 = LightFormat.default;

function lightFormat(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$11, param, param$1);
}

var partial_arg$12 = Parse.default;

function parse(param, param$1, param$2) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry3(partial_arg$12, param, param$1, param$2);
}

var partial_arg$13 = AddBusinessDays.default;

function addBusinessDays(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$13, param, param$1);
}

var partial_arg$14 = AddDays.default;

function addDays(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$14, param, param$1);
}

var partial_arg$15 = DifferenceInBusinessDays.default;

function differenceInBusinessDays(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$15, param, param$1);
}

var partial_arg$16 = DifferenceInCalendarDays.default;

function differenceInCalendarDays(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$16, param, param$1);
}

var partial_arg$17 = DifferenceInDays.default;

function differenceInDays(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$17, param, param$1);
}

var partial_arg$18 = IsSameDay.default;

function isSameDay(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$18, param, param$1);
}

var partial_arg$19 = SetDay.default;

function setDay(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$19, param, param$1);
}

var partial_arg$20 = SetDayOfYear.default;

function setDayOfYear(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$20, param, param$1);
}

var partial_arg$21 = SubDays.default;

function subDays(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$21, param, param$1);
}

export {
  closestIndexTo ,
  formatWithOptions ,
  format ,
  closestTo ,
  compareAsc ,
  compareDesc ,
  formatDistance ,
  formatRelative ,
  isAfter ,
  isBefore ,
  isEqual ,
  lightFormat ,
  parse ,
  addBusinessDays ,
  addDays ,
  differenceInBusinessDays ,
  differenceInCalendarDays ,
  differenceInDays ,
  isSameDay ,
  setDay ,
  setDayOfYear ,
  subDays ,
  
}
/* partial_arg Not a pure module */
