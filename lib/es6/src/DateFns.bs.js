// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE

import * as Parse from "date-fns/fp/parse";
import * as Format from "date-fns/fp/format";
import * as SetDay from "date-fns/fp/setDay";
import * as AddDays from "date-fns/fp/addDays";
import * as IsAfter from "date-fns/fp/isAfter";
import * as IsEqual from "date-fns/fp/isEqual";
import * as SubDays from "date-fns/fp/subDays";
import * as AddHours from "date-fns/fp/addHours";
import * as IsBefore from "date-fns/fp/isBefore";
import * as SetHours from "date-fns/fp/setHours";
import * as SubHours from "date-fns/fp/subHours";
import * as ClosestTo from "date-fns/fp/closestTo";
import * as IsSameDay from "date-fns/fp/isSameDay";
import * as AddMinutes from "date-fns/fp/addMinutes";
import * as AddSeconds from "date-fns/fp/addSeconds";
import * as CompareAsc from "date-fns/fp/compareAsc";
import * as IsSameHour from "date-fns/fp/isSameHour";
import * as SetMinutes from "date-fns/fp/setMinutes";
import * as SetSeconds from "date-fns/fp/setSeconds";
import * as SubMinutes from "date-fns/fp/subMinutes";
import * as SubSeconds from "date-fns/fp/subSeconds";
import * as CompareDesc from "date-fns/fp/compareDesc";
import * as LightFormat from "date-fns/fp/lightFormat";
import * as IsSameMinute from "date-fns/fp/isSameMinute";
import * as IsSameSecond from "date-fns/fp/isSameSecond";
import * as SetDayOfYear from "date-fns/fp/setDayOfYear";
import * as ClosestIndexTo from "date-fns/fp/closestIndexTo";
import * as FormatDistance from "date-fns/fp/formatDistance";
import * as FormatRelative from "date-fns/fp/formatRelative";
import * as AddBusinessDays from "date-fns/fp/addBusinessDays";
import * as AddMilliseconds from "date-fns/fp/addMilliseconds";
import * as SetMilliseconds from "date-fns/fp/setMilliseconds";
import * as SubMilliseconds from "date-fns/fp/subMilliseconds";
import * as DifferenceInSeconds from "date-fns/differenceInSeconds";
import * as DifferenceInDays from "date-fns/fp/differenceInDays";
import * as FormatDistanceStrict from "date-fns/formatDistanceStrict";
import * as DifferenceInHours from "date-fns/fp/differenceInHours";
import * as FormatWithOptions from "date-fns/fp/formatWithOptions";
import * as DifferenceInMinutes from "date-fns/fp/differenceInMinutes";
import * as DifferenceInBusinessDays from "date-fns/fp/differenceInBusinessDays";
import * as DifferenceInCalendarDays from "date-fns/fp/differenceInCalendarDays";
import * as DifferenceInMilliseconds from "date-fns/fp/differenceInMilliseconds";
import * as FormatDistanceWithOptions from "date-fns/fp/formatDistanceWithOptions";
import * as ReasonDateFnsCurryHelpers$ReasonDateFns from "./ReasonDateFnsCurryHelpers.bs.js";
import * as FormatDistanceStrictWithOptions from "date-fns/fp/formatDistanceStrictWithOptions";

var Locales = /* module */[];

var partial_arg = ClosestIndexTo.default;

function closestIndexTo(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg, param, param$1);
}

var partial_arg$1 = FormatWithOptions.default;

function formatWithOptions(param, param$1, param$2) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry3(partial_arg$1, param, param$1, param$2);
}

var partial_arg$2 = Format.default;

function format(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$2, param, param$1);
}

var partial_arg$3 = ClosestTo.default;

function closestTo(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$3, param, param$1);
}

var partial_arg$4 = CompareAsc.default;

function compareAsc(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$4, param, param$1);
}

var partial_arg$5 = CompareDesc.default;

function compareDesc(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$5, param, param$1);
}

var partial_arg$6 = FormatDistance.default;

function formatDistance(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$6, param, param$1);
}

var partial_arg$7 = FormatDistanceWithOptions.default;

function formatDistanceWithOptions(param, param$1, param$2) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry3(partial_arg$7, param, param$1, param$2);
}

var partial_arg$8 = FormatDistanceStrict.default;

function formatDistanceStrict(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$8, param, param$1);
}

var partial_arg$9 = FormatDistanceStrictWithOptions.default;

function formatDistanceStrictWithOptions(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$9, param, param$1);
}

var partial_arg$10 = FormatRelative.default;

function formatRelative(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$10, param, param$1);
}

var partial_arg$11 = IsAfter.default;

function isAfter(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$11, param, param$1);
}

var partial_arg$12 = IsBefore.default;

function isBefore(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$12, param, param$1);
}

var partial_arg$13 = IsEqual.default;

function isEqual(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$13, param, param$1);
}

var partial_arg$14 = LightFormat.default;

function lightFormat(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$14, param, param$1);
}

var partial_arg$15 = Parse.default;

function parse(param, param$1, param$2) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry3(partial_arg$15, param, param$1, param$2);
}

var partial_arg$16 = AddBusinessDays.default;

function addBusinessDays(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$16, param, param$1);
}

var partial_arg$17 = AddDays.default;

function addDays(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$17, param, param$1);
}

var partial_arg$18 = DifferenceInBusinessDays.default;

function differenceInBusinessDays(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$18, param, param$1);
}

var partial_arg$19 = DifferenceInCalendarDays.default;

function differenceInCalendarDays(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$19, param, param$1);
}

var partial_arg$20 = DifferenceInDays.default;

function differenceInDays(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$20, param, param$1);
}

var partial_arg$21 = IsSameDay.default;

function isSameDay(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$21, param, param$1);
}

var partial_arg$22 = SetDay.default;

function setDay(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$22, param, param$1);
}

var partial_arg$23 = SetDayOfYear.default;

function setDayOfYear(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$23, param, param$1);
}

var partial_arg$24 = SubDays.default;

function subDays(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$24, param, param$1);
}

var partial_arg$25 = AddMilliseconds.default;

function addMilliseconds(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$25, param, param$1);
}

var partial_arg$26 = DifferenceInMilliseconds.default;

function differenceInMilliseconds(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$26, param, param$1);
}

var partial_arg$27 = SetMilliseconds.default;

function setMilliseconds(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$27, param, param$1);
}

var partial_arg$28 = SubMilliseconds.default;

function subMilliseconds(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$28, param, param$1);
}

var partial_arg$29 = AddSeconds.default;

function addSeconds(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$29, param, param$1);
}

var partial_arg$30 = DifferenceInSeconds.default;

function differenceInSeconds(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$30, param, param$1);
}

var partial_arg$31 = SetSeconds.default;

function setSeconds(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$31, param, param$1);
}

var partial_arg$32 = IsSameSecond.default;

function isSameSecond(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$32, param, param$1);
}

var partial_arg$33 = SubSeconds.default;

function subSeconds(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$33, param, param$1);
}

var partial_arg$34 = AddMinutes.default;

function addMinutes(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$34, param, param$1);
}

var partial_arg$35 = DifferenceInMinutes.default;

function differenceInMinutes(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$35, param, param$1);
}

var partial_arg$36 = SetMinutes.default;

function setMinutes(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$36, param, param$1);
}

var partial_arg$37 = IsSameMinute.default;

function isSameMinute(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$37, param, param$1);
}

var partial_arg$38 = SubMinutes.default;

function subMinutes(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$38, param, param$1);
}

var partial_arg$39 = AddHours.default;

function addHours(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$39, param, param$1);
}

var partial_arg$40 = DifferenceInHours.default;

function differenceInHours(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$40, param, param$1);
}

var partial_arg$41 = SetHours.default;

function setHours(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$41, param, param$1);
}

var partial_arg$42 = IsSameHour.default;

function isSameHour(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$42, param, param$1);
}

var partial_arg$43 = SubHours.default;

function subHours(param, param$1) {
  return ReasonDateFnsCurryHelpers$ReasonDateFns.curry2(partial_arg$43, param, param$1);
}

export {
  Locales ,
  closestIndexTo ,
  formatWithOptions ,
  format ,
  closestTo ,
  compareAsc ,
  compareDesc ,
  formatDistance ,
  formatDistanceWithOptions ,
  formatDistanceStrict ,
  formatDistanceStrictWithOptions ,
  formatRelative ,
  isAfter ,
  isBefore ,
  isEqual ,
  lightFormat ,
  parse ,
  addBusinessDays ,
  addDays ,
  differenceInBusinessDays ,
  differenceInCalendarDays ,
  differenceInDays ,
  isSameDay ,
  setDay ,
  setDayOfYear ,
  subDays ,
  addMilliseconds ,
  differenceInMilliseconds ,
  setMilliseconds ,
  subMilliseconds ,
  addSeconds ,
  differenceInSeconds ,
  setSeconds ,
  isSameSecond ,
  subSeconds ,
  addMinutes ,
  differenceInMinutes ,
  setMinutes ,
  isSameMinute ,
  subMinutes ,
  addHours ,
  differenceInHours ,
  setHours ,
  isSameHour ,
  subHours ,
  
}
/* partial_arg Not a pure module */
